<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="boot.sagu.mapper.ChatDeclarationMapper">

    <!-- ResultMap 정의 -->
    <resultMap id="ChatDeclarationResultMap" type="boot.sagu.dto.ChatDeclarationDto">
        <id column="declaration_id" property="declarationId"/>
        <result column="declaration_chat_room_id" property="declarationChatRoomId"/>
        <result column="declaration_memberid" property="declarationMemberId"/>
        <result column="declaration_opposite_memberid" property="declarationOppositeMemberId"/>
        <result column="declaration_type" property="declarationType"/>
        <result column="declaration_content" property="declarationContent"/>
        <result column="declaration_time" property="declarationTime"/>
        <result column="status" property="status"/>
        <result column="result" property="result"/>
    </resultMap>
    
    <!-- ChatDeclarationResultNotificationDto를 위한 ResultMap -->
    <resultMap id="ChatDeclarationResultNotificationMap" type="boot.sagu.dto.ChatDeclarationResultNotificationDto">
        <id column="chatdeclarationresult_id" property="chatdeclarationresultId"/>
        <result column="chatdeclaration_id" property="chatdeclarationId"/>
        <result column="result_member_id" property="resultMemberId"/>
        <result column="result_content" property="resultContent"/>
        <result column="is_read" property="isRead"/>
        <result column="created_at" property="createdAt"/>
        <result column="declaration_type" property="declarationType"/>
        <result column="declaration_content" property="declarationContent"/>
        <result column="reported_member_nickname" property="reportedMemberNickname"/>
        <result column="reported_chat_content" property="reportedChatContent"/>
    </resultMap>

    <!-- chatdeclaration 테이블의 status와 result 업데이트 -->
    <update id="updateDeclarationStatus" parameterType="map">
        UPDATE chatdeclaration 
        SET status = #{status}, 
            result = #{result}
        WHERE declaration_id = #{declarationId}
    </update>

    <!-- 모든 신고 조회 -->
    <select id="getAllDeclarations" resultMap="ChatDeclarationResultMap">
        SELECT 
            declaration_id,
            declaration_chat_room_id,
            declaration_memberid,
            declaration_opposite_memberid,
            declaration_type,
            declaration_content,
            declaration_time,
            status,
            result
        FROM chatdeclaration 
        ORDER BY declaration_id DESC
    </select>

    <!-- 특정 신고 조회 -->
    <select id="getDeclarationById" resultMap="ChatDeclarationResultMap">
        SELECT 
            declaration_id,
            declaration_chat_room_id,
            declaration_memberid,
            declaration_opposite_memberid,
            declaration_type,
            declaration_content,
            declaration_time,
            status,
            result
        FROM chatdeclaration 
        WHERE declaration_id = #{declarationId}
    </select>

    <!-- 신고 결과 삽입 -->
    <insert id="insertDeclarationResult" parameterType="boot.sagu.dto.ChatDeclarationResultDto">
        INSERT INTO chatdeclarationresult (
            chatdeclaration_id, 
            result_member_id, 
            result_content, 
            created_at
        ) VALUES (
            #{declarationId}, 
            #{resultMemberId}, 
            #{resultContent}, 
            NOW()
        )
    </insert>
    
    <!-- 특정 회원이 받은 신고 결과 알림 목록 조회 -->
    <select id="getDeclarationResultNotifications" resultMap="ChatDeclarationResultNotificationMap">
        SELECT 
            cdr.chatdeclarationresult_id,
            cdr.chatdeclaration_id,
            cdr.result_member_id,
            cdr.result_content,
            cdr.is_read,
            cdr.created_at,
            cd.declaration_type,
            cd.declaration_content,
            m.nickname as reported_member_nickname,
            cd.declaration_content as reported_chat_content
        FROM chatdeclarationresult cdr
        INNER JOIN chatdeclaration cd ON cdr.chatdeclaration_id = cd.declaration_id
        INNER JOIN members m ON cd.declaration_memberid = m.member_id
        WHERE cdr.result_member_id = #{resultMemberId} and cd.result='SANCTION'
        ORDER BY cdr.created_at DESC
    </select>
    
    <!-- 신고 결과 알림을 읽음 처리 -->
    <update id="markDeclarationResultAsRead">
        UPDATE chatdeclarationresult 
        SET is_read = 1 
        WHERE chatdeclarationresult_id = #{chatdeclarationresultId}
    </update>

    <!-- 특정 사용자의 읽지 않은 알림 개수 조회 -->
    <select id="getUnreadNotificationCount" resultType="int">
        SELECT COUNT(*) 
        FROM chatdeclarationresult cdr
        WHERE cdr.result_member_id = #{memberId} 
        AND (cdr.is_read = 0 OR cdr.is_read IS NULL)
    </select>

	<select id="countReports" resultType="int">
		select count(*) from chatdeclaration where status='RECEIVED'
	</select>
	
	<insert id="insertDeclaration" parameterType="boot.sagu.dto.ChatDeclarationDto" useGeneratedKeys="true" keyProperty="declarationId">
		insert into chatdeclaration (
			declaration_chat_room_id,
			declaration_memberid,
			declaration_opposite_memberid,
			declaration_type,
			declaration_content,
			declaration_time
		) values (
			#{declarationChatRoomId},
			#{declarationMemberId},
			#{declarationOppositeMemberId},
			#{declarationType},
			#{declarationContent},
			now()
		)
	</insert>
	
	<!-- 특정 회원이 받은 채팅 신고 목록 조회 -->
	<select id="getChatDeclarationsForMember" resultMap="ChatDeclarationResultMap">
		SELECT 
			declaration_id,
			declaration_chat_room_id,
			declaration_memberid,
			declaration_opposite_memberid,
			declaration_type,
			declaration_content,
			declaration_time,
			status,
			result
		FROM chatdeclaration 
		WHERE declaration_opposite_memberid = #{memberId}
		ORDER BY declaration_time DESC
	</select>
</mapper>