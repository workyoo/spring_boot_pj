<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="boot.sagu.mapper.AuctionMapper">

    <!-- 경매글 리스트 -->
    	<select id="getAuctionPosts" parameterType="string" resultType="boot.sagu.dto.PostsDto">
		SELECT 
			p.post_id,
			p.member_id,
			p.title,
			p.content,
			p.price,
			p.trade_type,
			p.status,
			p.auction_end_time,
			p.winner_id,
			p.view_count,
			p.created_at,
			p.updated_at,
			p.post_type,
			COALESCE(CONCAT('/save/', pp.photo_url), '') as image,
			COALESCE(bid_count.bidder_count, 0) as bidderCount
		FROM posts p
		LEFT JOIN (
			SELECT post_id, photo_url,
				ROW_NUMBER() OVER (PARTITION BY post_id ORDER BY is_main DESC, photo_id ASC) as rn
			FROM post_photos
		) pp ON p.post_id = pp.post_id AND pp.rn = 1
		LEFT JOIN (
			SELECT post_id, COUNT(DISTINCT bidder_id) as bidder_count
			FROM auction_bids
			GROUP BY post_id
		) bid_count ON p.post_id = bid_count.post_id
		WHERE p.trade_type = 'AUCTION' 
		AND (p.status = 'ON_SALE' OR p.status = 'SOLD')
		<choose>
			<when test="sortType == 'time'">
				ORDER BY p.auction_end_time ASC
			</when>
			<when test="sortType == 'bidders'">
				ORDER BY bidder_count DESC, p.auction_end_time ASC
			</when>
			<otherwise>
				ORDER BY p.auction_end_time ASC
			</otherwise>
		</choose>
	</select>
    
    <!-- 경매글 상세 조회 -->
    <select id="getAuctionDetail" parameterType="long" resultType="boot.sagu.dto.PostsDto">
        SELECT 
            post_id,
            member_id,
            title,
            content,
            price,
            trade_type,
            status,
            auction_end_time,
            winner_id,
            view_count,
            created_at,
            updated_at,
            post_type
        FROM posts
        WHERE post_id = #{postId} AND trade_type = 'AUCTION'
        LIMIT 1
    </select>

    <!-- 입찰 정보 저장 -->
    <insert id="insertBid" parameterType="boot.sagu.dto.AuctionDto">
        INSERT INTO auction_bids (
            post_id,
            bidder_id,
            bid_amount,
            bid_time
        ) VALUES (
            #{postId},
            #{bidderId},
            #{bidAmount},
            CONVERT_TZ(NOW(), 'UTC', 'Asia/Seoul')
        )
    </insert>

    <!-- 최고가 조회 -->
    <select id="getHighestBid" parameterType="long" resultType="boot.sagu.dto.AuctionDto">
        SELECT 
            bid_id,
            post_id,
            bidder_id,
            bid_amount,
            bid_time
        FROM auction_bids
        WHERE post_id = #{postId}
        ORDER BY bid_amount DESC,bid_time ASC
        LIMIT 1
    </select>

    <!-- 작성자 닉네임 조회 -->
    <select id="getMemberNickname" parameterType="long" resultType="boot.sagu.dto.MemberDto">
        SELECT 
            member_id,
            nickname
        FROM members
        WHERE member_id = #{memberId}
        LIMIT 1
    </select>

    <!-- 종료된 경매 목록 조회 (winner_id가 NULL이고 마감시간이 지난 경매) -->
    <select id="getEndedAuctions" resultType="boot.sagu.dto.PostsDto">
        <![CDATA[
        SELECT 
            post_id,
            member_id,
            title,
            content,
            price,
            trade_type,
            status,
            auction_end_time,
            winner_id,
            view_count,
            created_at,
            updated_at,
            post_type
        FROM posts
        WHERE trade_type = 'AUCTION' 
        AND winner_id IS NULL 
        AND auction_end_time < CONVERT_TZ(NOW(), 'UTC', 'Asia/Seoul')
        AND status != 'SOLD'
        ]]>
    </select>

    <!-- winner_id 업데이트 경매종료 처리 -->
    <update id="updateWinnerId">
        UPDATE posts 
        SET winner_id = #{winnerId},
            updated_at = CONVERT_TZ(NOW(), 'UTC', 'Asia/Seoul')
        WHERE post_id = #{postId}
    </update>

    <!-- 경매 상태 업데이트 -->
    <update id="updateAuctionStatus">
        UPDATE posts 
        SET status = #{status},
            updated_at = CONVERT_TZ(NOW(), 'UTC', 'Asia/Seoul')
        WHERE post_id = #{postId}
    </update>
    
    <!-- 수동 경매 종료 시 상태와 종료시간 업데이트 -->
    <update id="updateAuctionStatusAndEndTime">
        UPDATE posts 
        SET status = #{status},
            auction_end_time = CONVERT_TZ(NOW(), 'UTC', 'Asia/Seoul'),
            updated_at = CONVERT_TZ(NOW(), 'UTC', 'Asia/Seoul')
        WHERE post_id = #{postId}
    </update>
    

    
      <!-- 경매 사진 조회 -->
    <select id="getAuctionPhotos" parameterType="long" resultType="map">
        SELECT 
            photo_id,
            post_id,
            photo_url,
            is_main
        FROM post_photos
        WHERE post_id = #{postId}
        ORDER BY is_main DESC, photo_id ASC
    </select>
	
	<!-- ==================================보증금 관련 =================================== -->
	<!-- 멤버가 게시글에 관한 보증급을 납부했는지 -->
	<select id="countAuctionGuaranteeByPostAndMember" resultType="int">
		select count(*) from auction_guarantees where post_id=#{postId} and member_id=#{memberId} and status IN ('PAID','HOLD')
	</select>
	
	<!-- 보증금 납부  -->
	<insert id="insertGuarantee" parameterType="GuaranteeDTO">
		 INSERT INTO auction_guarantees (post_id, member_id, amount, imp_uid,merchant_uid,status,created_at)
  							VALUES (#{postId}, #{memberId}, #{amount}, #{impUid},#{merchantUid},'PAID',now())
	</insert>
	
	<select id="existsGuaranteeByImpUid" parameterType="string" resultType="int">
	  SELECT COUNT(*) FROM auction_guarantees WHERE imp_uid = #{impUid}
	</select>
	
	<!-- 게시글에서 입찰자중 낙찰자가 아닌사람들의 모든정보 조회 -->
	<select id="findNonWinnerGuarantees" resultType="GuaranteeDTO">
  		select * from auction_guarantees where post_id=#{postId} 
  			and member_id!=#{winnerId} 	
  			and status = 'PAID'
	</select>
	<!-- 보증금 상태 변경  -->
	<update id="updateGuaranteeStatus">
	  UPDATE auction_guarantees
	  SET status = #{status},
	      refunded_at = CASE WHEN #{status}='REFUNDED' THEN NOW() ELSE refunded_at END,
	      forfeited_at = CASE WHEN #{status} = 'FORFEITED' THEN NOW() ELSE forfeited_at END
	  WHERE guarantee_id = #{guaranteeId}
	</update>
	<!-- 게시글 시작가 조회 -->
	<select id="getStartPrice" parameterType="long" resultType="int">
		select price from posts where post_id=#{postId, jdbcType=BIGINT} limit 1
	</select>
	
	<!-- 경매 삭제 -->
	<delete id="deleteAuction" parameterType="long">
		DELETE FROM posts WHERE post_id = #{postId}
	</delete>
	
	<!-- 경매 삭제 전 연관된 used_items 데이터 삭제 -->
	<delete id="deleteUsedItemsByPostId" parameterType="long">
		DELETE FROM used_items WHERE post_id = #{postId}
	</delete>
	
	<!-- 경매 삭제 전 연관된 사진 데이터 삭제 -->
	<delete id="deletePhotosByPostId" parameterType="long">
		DELETE FROM post_photos WHERE post_id = #{postId}
	</delete>
	
	<!-- 경매 삭제 전 연관된 favorites 데이터 삭제 -->
	<delete id="deleteFavoritesByPostId" parameterType="long">
		DELETE FROM favorites WHERE post_id = #{postId}
	</delete>
	
	<!-- 경매 삭제 전 연관된 chatroom 데이터 삭제 -->
	<delete id="deleteChatroomsByPostId" parameterType="long">
		DELETE FROM chatroom WHERE product_id = #{postId}
	</delete>
	
	<!-- 입찰 기록 조회 (최근 5개, 닉네임 포함) -->
	<select id="getBidHistory" parameterType="long" resultType="java.util.Map">
		SELECT 
			ab.bid_id as id,
			m.nickname as bidderName,
			ab.bid_amount as bidAmount,
			ab.bid_time as bidTime
		FROM auction_bids ab
		JOIN members m ON ab.bidder_id = m.member_id
		WHERE ab.post_id = #{postId}
		ORDER BY ab.bid_time DESC
		LIMIT 5
	</select>
	
	<!-- 조회수 증가 -->
	<update id="incrementViewCount" parameterType="long">
		UPDATE posts 
		SET view_count = view_count + 1 
		WHERE post_id = #{postId}
	</update>
	
		<!-- 보증금 단건 조회 -->
	<select id="findGuarantee" resultType="boot.sagu.dto.AuctionGuaranteeDTO">
	  SELECT * FROM auction_guarantees
	  WHERE post_id = #{postId} AND member_id = #{memberId}
	  LIMIT 1
	</select>
	
	<select id="findPaidGuaranteesByPost" parameterType="long" resultType="GuaranteeDTO">
		select * from auction_guarantee WHERE post_id = #{postId}  AND status = 'PAID'
	</select>

	<!-- ==================================마이페이지 판매 내역 관련 =================================== -->
	
	<!-- 내 게시글 타입별 개수 조회 -->
	<select id="getMyPostsCounts" parameterType="int" resultType="java.util.Map">
		SELECT 
			COUNT(*) as total,
			SUM(CASE WHEN trade_type = 'AUCTION' THEN 1 ELSE 0 END) as auction,
			SUM(CASE WHEN trade_type = 'SALE' THEN 1 ELSE 0 END) as sale,
			SUM(CASE WHEN trade_type = 'SHARE' THEN 1 ELSE 0 END) as share
		FROM posts 
		WHERE member_id = #{memberId}
	</select>
	
	<!-- 내 게시글 상태별 개수 조회 (타입 필터 적용) -->
	<select id="getMyPostsStatusCounts" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
			SUM(CASE WHEN status = 'ON_SALE' THEN 1 ELSE 0 END) as on_sale,
			SUM(CASE WHEN status = 'RESERVED' THEN 1 ELSE 0 END) as reserved,
			SUM(CASE WHEN status = 'SOLD' AND (trade_type != 'AUCTION' OR (trade_type = 'AUCTION' AND winner_id IS NOT NULL)) THEN 1 ELSE 0 END) as sold,
			SUM(CASE WHEN trade_type = 'AUCTION' AND status = 'SOLD' AND winner_id IS NULL THEN 1 ELSE 0 END) as cancelled
		FROM posts 
		WHERE member_id = #{memberId}
		<if test="type != null and type != 'all'">
			AND trade_type = #{type}
		</if>
	</select>
	
	<!-- 내 게시글 목록 조회 (페이징 포함) -->
	<select id="getMyPosts" parameterType="java.util.Map" resultType="boot.sagu.dto.PostsDto">
		SELECT 
			p.post_id,
			p.member_id,
			p.title,
			p.content,
			p.price,
			p.trade_type,
			p.status,
			p.auction_end_time,
			p.winner_id,
			p.view_count,
			p.created_at,
			p.updated_at,
			p.post_type,
			COALESCE(pp.photo_url, '') as image,
			m.nickname as buyerName
		FROM posts p
		LEFT JOIN (
			SELECT post_id, photo_url,
				ROW_NUMBER() OVER (PARTITION BY post_id ORDER BY is_main DESC, photo_id ASC) as rn
			FROM post_photos
		) pp ON p.post_id = pp.post_id AND pp.rn = 1
		LEFT JOIN members m ON p.winner_id = m.member_id
		WHERE p.member_id = #{memberId}
		<if test="type != null and type != 'all'">
			AND p.trade_type = #{type}
		</if>
		<if test="status != null and status != 'all'">
			<choose>
				<when test="status == 'cancelled'">
					AND p.trade_type = 'AUCTION' AND p.status = 'SOLD' AND p.winner_id IS NULL
				</when>
				<when test="status == 'SOLD'">
					AND p.status = 'SOLD' AND (p.trade_type != 'AUCTION' OR (p.trade_type = 'AUCTION' AND p.winner_id IS NOT NULL))
				</when>
				<otherwise>
					AND p.status = #{status}
				</otherwise>
			</choose>
		</if>
		ORDER BY p.created_at DESC
		LIMIT #{offset}, #{limit}
	</select>
	
	<!-- 내 게시글 총 개수 조회 (페이징용) -->
	<select id="getMyPostsTotalCount" parameterType="java.util.Map" resultType="int">
		SELECT COUNT(*)
		FROM posts p
		WHERE p.member_id = #{memberId}
		<if test="type != null and type != 'all'">
			AND p.trade_type = #{type}
		</if>
		<if test="status != null and status != 'all'">
			<choose>
				<when test="status == 'cancelled'">
					AND p.trade_type = 'AUCTION' AND p.status = 'SOLD' AND p.winner_id IS NULL
				</when>
				<when test="status == 'SOLD'">
					AND p.status = 'SOLD' AND (p.trade_type != 'AUCTION' OR (p.trade_type = 'AUCTION' AND p.winner_id IS NOT NULL))
				</when>
				<otherwise>
					AND p.status = #{status}
				</otherwise>
			</choose>
		</if>
	</select>

	<!-- ==================================마이페이지 입찰 내역 관련 =================================== -->
	
	<!-- 내 입찰 기록 조회 (페이징 포함) -->
	<select id="getMyBids" resultType="java.util.Map">
		SELECT 
			ab.bid_id,
			ab.post_id,
			ab.bidder_id,
			ab.bid_amount,
			ab.bid_time,
			p.title,
			p.content,
			p.price as start_price,
			p.trade_type,
			p.status,
			p.auction_end_time,
			p.winner_id,
			p.view_count,
			p.created_at,
			COALESCE(pp.photo_url, '') as image,
			seller.nickname as seller_name,
			highest_bid.bid_amount as highest_bid_amount,
			highest_bid.bidder_id as highest_bidder_id,
			CASE 
				WHEN highest_bid.bidder_id = #{memberId} THEN '최고 입찰자'
				ELSE '차순위 입찰자'
			END as bidder_rank,
			CASE 
				WHEN p.status = 'ON_SALE' THEN '진행중'
				WHEN p.status = 'SOLD' AND p.winner_id = #{memberId} THEN '낙찰완료'
				WHEN p.status = 'SOLD' AND p.winner_id IS NOT NULL AND p.winner_id != #{memberId} THEN '낙찰실패'
				WHEN p.status = 'SOLD' AND p.winner_id IS NULL THEN '낙찰실패'
				ELSE '진행중'
			END as auction_status
		FROM auction_bids ab
		JOIN posts p ON ab.post_id = p.post_id
		LEFT JOIN (
			SELECT post_id, photo_url,
				ROW_NUMBER() OVER (PARTITION BY post_id ORDER BY is_main DESC, photo_id ASC) as rn
			FROM post_photos
		) pp ON p.post_id = pp.post_id AND pp.rn = 1
		LEFT JOIN members seller ON p.member_id = seller.member_id
		LEFT JOIN (
			SELECT 
				post_id,
				bidder_id,
				bid_amount
			FROM auction_bids ab1
			WHERE (post_id, bid_amount) IN (
				SELECT post_id, MAX(bid_amount) 
				FROM auction_bids 
				GROUP BY post_id
			)
		) highest_bid ON p.post_id = highest_bid.post_id
		WHERE ab.bidder_id = #{memberId}
		<if test="status != null and status != 'all'">
			<choose>
				<when test="status == 'active'">
					AND p.status = 'ON_SALE'
				</when>
				<when test="status == 'completed'">
					AND p.status = 'SOLD' AND p.winner_id = #{memberId}
				</when>
				<when test="status == 'failed'">
					AND p.status = 'SOLD' AND (p.winner_id IS NOT NULL AND p.winner_id != #{memberId} OR p.winner_id IS NULL)
				</when>
			</choose>
		</if>
		ORDER BY ab.bid_time DESC
		LIMIT #{offset}, #{limit}
	</select>
	
	<!-- 내 입찰 기록 총 개수 -->
	<select id="getMyBidsTotalCount" parameterType="int" resultType="int">
		SELECT COUNT(DISTINCT ab.post_id)
		FROM auction_bids ab
		WHERE ab.bidder_id = #{memberId}
	</select>
	
	<!-- 내 입찰 기록 상태별 개수 -->
	<select id="getMyBidsStatusCounts" parameterType="int" resultType="java.util.Map">
		SELECT 
			SUM(CASE WHEN p.status = 'ON_SALE' THEN 1 ELSE 0 END) as active,
			SUM(CASE WHEN p.status = 'SOLD' AND p.winner_id = #{memberId} THEN 1 ELSE 0 END) as completed,
			SUM(CASE WHEN (p.status = 'SOLD' AND p.winner_id IS NOT NULL AND p.winner_id != #{memberId}) OR (p.status = 'SOLD' AND p.winner_id IS NULL) THEN 1 ELSE 0 END) as failed
		FROM auction_bids ab
		JOIN posts p ON ab.post_id = p.post_id
		LEFT JOIN (
			SELECT 
				post_id,
				bidder_id,
				bid_amount
			FROM auction_bids ab1
			WHERE (post_id, bid_amount) IN (
				SELECT post_id, MAX(bid_amount) 
				FROM auction_bids 
				GROUP BY post_id
			)
		) highest_bid ON p.post_id = highest_bid.post_id
		WHERE ab.bidder_id = #{memberId}
	</select>

	<!-- ==================================마이페이지 찜한 상품 관련 =================================== -->
	
	<!-- 내 찜한 상품 타입별 개수 조회 -->
	<select id="getMyFavoritesCounts" parameterType="int" resultType="java.util.Map">
		SELECT 
			COUNT(*) as total,
			SUM(CASE WHEN p.trade_type = 'AUCTION' THEN 1 ELSE 0 END) as auction,
			SUM(CASE WHEN p.trade_type = 'SALE' THEN 1 ELSE 0 END) as general,
			SUM(CASE WHEN p.trade_type = 'SHARE' THEN 1 ELSE 0 END) as share,
			SUM(CASE WHEN p.status = 'ON_SALE' THEN 1 ELSE 0 END) as available
		FROM favorites f
		JOIN posts p ON f.post_id = p.post_id
		WHERE f.member_id = #{memberId}
	</select>
	
	<!-- 내 찜한 상품 목록 조회 (페이징 포함) -->
	<select id="getMyFavorites" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
			f.favorite_id,
			f.member_id,
			f.post_id,
			f.created_at as favorite_created_at,
			p.title,
			p.content as description,
			p.price,
			p.trade_type as post_type,
			p.status,
			p.auction_end_time,
			p.created_at as post_created_at,
			p.view_count,
			m.nickname,
			COALESCE(pp.photo_url, '') as main_photo_url
		FROM favorites f
		JOIN posts p ON f.post_id = p.post_id
		JOIN members m ON p.member_id = m.member_id
		LEFT JOIN (
			SELECT post_id, photo_url,
				ROW_NUMBER() OVER (PARTITION BY post_id ORDER BY is_main DESC, photo_id ASC) as rn
			FROM post_photos
		) pp ON p.post_id = pp.post_id AND pp.rn = 1
		WHERE f.member_id = #{memberId}
		<if test="type != null and type != 'all'">
			<choose>
				<when test="type == 'auction'">
					AND p.trade_type = 'AUCTION'
				</when>
				<when test="type == 'general'">
					AND p.trade_type = 'SALE'
				</when>
				<when test="type == 'share'">
					AND p.trade_type = 'SHARE'
				</when>
			</choose>
		</if>
		<if test="search != null and search != ''">
			AND (p.title LIKE CONCAT('%', #{search}, '%') OR p.content LIKE CONCAT('%', #{search}, '%'))
		</if>
		<choose>
			<when test="sort == 'date'">
				ORDER BY f.created_at DESC
			</when>
			<when test="sort == 'price-low'">
				ORDER BY p.price ASC
			</when>
			<when test="sort == 'price-high'">
				ORDER BY p.price DESC
			</when>
			<when test="sort == 'name'">
				ORDER BY p.title ASC
			</when>
			<otherwise>
				ORDER BY f.created_at DESC
			</otherwise>
		</choose>
		LIMIT #{offset}, #{limit}
	</select>
	
	<!-- 내 찜한 상품 총 개수 조회 (페이징용) -->
	<select id="getMyFavoritesTotalCount" parameterType="java.util.Map" resultType="int">
		SELECT COUNT(*)
		FROM favorites f
		JOIN posts p ON f.post_id = p.post_id
		WHERE f.member_id = #{memberId}
		<if test="type != null and type != 'all'">
			<choose>
				<when test="type == 'auction'">
					AND p.trade_type = 'AUCTION'
				</when>
				<when test="type == 'general'">
					AND p.trade_type = 'SALE'
				</when>
				<when test="type == 'share'">
					AND p.trade_type = 'SHARE'
				</when>
			</choose>
		</if>
		<if test="search != null and search != ''">
			AND (p.title LIKE CONCAT('%', #{search}, '%') OR p.content LIKE CONCAT('%', #{search}, '%'))
		</if>
	</select>
	
	<!-- 내 찜한 상품 타입별 개수 조회 -->
	<select id="getMyFavoritesTypeCounts" parameterType="int" resultType="java.util.Map">
		SELECT 
			COUNT(*) as total,
			SUM(CASE WHEN p.trade_type = 'AUCTION' THEN 1 ELSE 0 END) as auction,
			SUM(CASE WHEN p.trade_type = 'SALE' THEN 1 ELSE 0 END) as general,
			SUM(CASE WHEN p.trade_type = 'SHARE' THEN 1 ELSE 0 END) as share
		FROM favorites f
		JOIN posts p ON f.post_id = p.post_id
		WHERE f.member_id = #{memberId}
	</select>

	
</mapper> 